name: Publish (Self-contained)

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      DOTNET_VERSION: '8.0.x'
      PROJECT_FILE: 'KoroneStrapper.csproj'
      APP_NAME: 'KoroneStrapper'

    strategy:
      fail-fast: false
      matrix:
        rid: [ win-x64 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore "${{ env.PROJECT_FILE }}"

      - name: Publish
        shell: pwsh
        run: |
          $rid = '${{ matrix.rid }}'
          # e.g. out/publish/win-x64
          $env:PUBLISH_DIR = "out/publish/$rid"
          if (Test-Path $env:PUBLISH_DIR) { Remove-Item $env:PUBLISH_DIR -Recurse -Force }
          dotnet publish "${{ env.PROJECT_FILE }}" `
            -c Release `
            -r $rid `
            --self-contained true `
            -p:PublishSingleFile=true `
            -p:IncludeNativeLibrariesForSelfExtract=true `
            -p:EnableCompressionInSingleFile=true `
            -p:DebugType=None `
            -o "$env:PUBLISH_DIR"

      - name: Package
        id: package
        shell: pwsh
        run: |
          $rid = '${{ matrix.rid }}'
          $pub = "out/publish/$rid"
          if (-not (Test-Path $pub)) { throw "Publish dir not found: $pub" }

          $version = if ($env:GITHUB_REF -like 'refs/tags/*') {
            $env:GITHUB_REF -replace 'refs/tags/',''
          } else {
            (Get-Date -Format 'yyyyMMdd-HHmm')
          }

          $zipName = "${{ env.APP_NAME }}-$version-$rid.zip"
          $zipPath = Join-Path $pwd $zipName

          # stage + optional extras
          $stage = "out/stage/$rid"
          if (Test-Path $stage) { Remove-Item $stage -Recurse -Force }
          New-Item $stage -ItemType Directory | Out-Null
          Copy-Item "$pub\*" $stage -Recurse
          if (Test-Path "README.md") { Copy-Item "README.md" $stage }
          if (Test-Path "LICENSE")   { Copy-Item "LICENSE"   $stage }

          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path "$stage\*" -DestinationPath $zipPath
          Remove-Item $stage -Recurse -Force

          echo "zip=$zipPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "zip_name=$zipName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.rid }}
          path: ${{ steps.package.outputs.zip }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
