name: Publish (Self-contained)

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      DOTNET_VERSION: '6.0.x'
      PROJECT_FILE: 'KoroneStrapper.csproj'
      APP_NAME: 'KoroneStrapper'

    strategy:
      fail-fast: false
      matrix:
        rid: [ win-x64, win-arm64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore "${{ env.PROJECT_FILE }}"

      - name: Publish (self-contained single-file)
        run: >
          dotnet publish "${{ env.PROJECT_FILE }}"
          -c Release
          -r ${{ matrix.rid }}
          --self-contained true
          -p:PublishSingleFile=true
          -p:IncludeNativeLibrariesForSelfExtract=true
          -p:DebugType=None
          -p:ErrorOnDuplicatePublishOutputFiles=false
          -p:EnableCompressionInSingleFile=true

      - name: Locate output
        id: out
        shell: pwsh
        run: |
          $outDir = Join-Path (Split-Path "${{ env.PROJECT_FILE }}") "bin\Release"
          $tfm = (Get-ChildItem $outDir -Directory | Sort-Object Name -Descending | Select-Object -First 1).Name
          $pub = Join-Path $outDir "$tfm\${{ matrix.rid }}\publish"
          echo "publish_dir=$pub" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "tfm=$tfm" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Package zip
        shell: pwsh
        run: |
          $pub = '${{ steps.out.outputs.publish_dir }}'
          $tfm = '${{ steps.out.outputs.tfm }}'
          $rid = '${{ matrix.rid }}'
          $version = if ($env:GITHUB_REF -like 'refs/tags/*') {
            $env:GITHUB_REF -replace 'refs/tags/',''
          } else {
            (Get-Date -Format 'yyyyMMdd-HHmm')
          }
          $zipName = "${{ env.APP_NAME }}-$version-$tfm-$rid.zip"
          $zipPath = Join-Path $pwd $zipName

          # Optional: include README / LICENSE if present
          $temp = Join-Path $pwd "package-$rid"
          if (Test-Path $temp) { Remove-Item $temp -Recurse -Force }
          New-Item $temp -ItemType Directory | Out-Null
          Copy-Item "$pub\*" $temp -Recurse
          if (Test-Path "README.md") { Copy-Item "README.md" $temp }
          if (Test-Path "LICENSE")   { Copy-Item "LICENSE"   $temp }

          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path "$temp\*" -DestinationPath $zipPath
          Remove-Item $temp -Recurse -Force

          echo "zip=$zipPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "zip_name=$zipName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.out.outputs.tfm }}-${{ matrix.rid }}
          path: ${{ steps.package.outputs.zip || steps.out.outputs.zip || steps.package.outputs.zip_path || steps.package.outputs.zipname || steps.package.outputs.zipfile || '' }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
